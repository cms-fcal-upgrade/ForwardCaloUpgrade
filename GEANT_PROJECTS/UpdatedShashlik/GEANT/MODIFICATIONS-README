There were several modifications made to enable certain capabilities to the
geant Ntuple.

Note: In order to study the effects of pileup, we generated two separate
HepMC ascii files via Pythia, one file of signal events, and another file
of MinBias events. Then we utilized a program called PileMC (which can be
found at pilemc.hepforg.org) which takes event by event the vertices and 
associated particles in the signal file, and then attaches below them a 
number of vertices and associated particles from the MinBias file. The 
number of MinBias vertices to add is determined by a Poisson distribution
centered at a user-given number. In doing so, the vertex barcodes in the
signal file are maintained, but the vertex barcodes in the MinBias file are
modified by -1000000. E.g a MinBias vertex with barcode -2 -> -1000002 in the
newly created pileup file. This specific way of numbering of vertex barcodes
in the pileup file is essential to how the recording of generator level info
is handled.



The added capabilities to the Geant Ntuple are:

- Moveable X,Y position of the Ecal cells.

- Increased the number of Cells up to 100x100
	-> This aided in the recording of jets.

- The addition of a Beampipe hole option.
	-> Note that the run time of Geant4 without the Beampipe hole option
       turned on is ~10x longer with pileup since most MinBias particles
       hit that region.
	-> The option is now given in the input file as /ecal/det/setBeamhole #
	   with # = 0 -> off, # = 1 -> on.

- Added HCells.
	-> similar to ECells, only for the HCal.
	-> the XY position of HCells is the same as ECells

- Projective Geometry.
	-> Hcal and Ecal cells are projected 0.3m behind primary interaction point

- Recording of Generator Level Information.
	-> takes and records information from the input HepMC ascii into
	   trees in the output Ntuple.
	-> this information includes:
	    -> For the stored vertices:
		-> The vertex barcodes.
		-> vertex x,y,z position.
	        -> The number of vertices stored in each event.
		-> For the stored particles:
            -> The vertex barcode that it came from.
	        -> The particle's Px, Py, Pz.
		-> The particle's PDG code.
	        -> The number of particles stored in each event.
	-> The recording has 3 options that are given in the input file
       as /test/histo/setRecVtx #
		-> # = 0 -> Nothing is recorded
		-> # = 1 -> Only stored "primaries" are recorded (the verticies with 
                       barcodes > -1000000 i.e those from the pre-pilemc signal file)
		-> # = 2 -> All stored vertices and associated particles are recorded

- Recorded the XY offset of the ECells and HCells (in mm)

Note: I used the term "stored" because geant does not keep all of the
vertices and particles at the end of a run. It only keeps particles that
made it to the detector material i.e those that did not decay beforehand
and those with Pz > 0. Therefore if a vertex from the input HepMC contains 
only particles that decayed, it is not recorded, and if a vertex contains
particles that did not decay, but have Pz < 0, then the vertex is recorded
but only particles with Pz > 0 are recorded to the final Ntuple. This is
the why some events may have more recorded vertices than particles in the
Ntuple.
