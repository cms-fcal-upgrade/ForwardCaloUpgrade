$Id: README,v 1.5 2004-05-31 18:13:04 gum Exp $
-------------------------------------------------------------------

     =========================================================
     Geant4 - an Object-Oriented Toolkit for Simulation in HEP
     =========================================================

                            ExampleN06
                            ----------

This example presently illustrates the following basic concepts, and in
particular (indicated with ***), how to use G4 for optical photon
generation and transport. An extended example of what is possible
in Geant4 with optical photons can be found at
examples/extended/optical/LXe. 

main()
------

 ==> define Random Number Engine and initial seed

G4VUserPhysicsList 
------------------

 ==> define particles; including *** G4OpticalPhoton     ***
     define processes; including *** G4Cerenkov          ***
                                 *** G4Scintillation     ***
                                 *** G4OpAbsorption      ***
                                 *** G4OpRayleigh        ***
                                 *** G4OpBoundaryProcess ***

G4VUserDetectorConstruction 
---------------------------

 ==> define material: Air and Water
     define simple G4box geometry
     *** add G4MaterialPropertiesTable to G4Material       ***
     *** define G4LogicalSurface(s)                        ***
     *** define G4OpticalSurface                           ***
     *** add G4MaterialPropertiesTable to G4OpticalSurface ***

G4VUserPrimaryGeneratorAction
-----------------------------

 ==> Use G4ParticleGun to shoot a charge particle into a Cerenkov radiator
 
 ==> A messenger command allows to define interactivly the polarization of an
     primary optical photon (see for instance optPhoton.mac)
     
G4UserRunAction 
---------------

==> define G4Timer (start/stop)
    set verbose levels

G4UserStackingAction
--------------------

==> show how to count the number of secondary particles in an event

Visualisation
-------------
 
 The Visualization Manager is set in the main().
 The initialisation of the drawing is done via a set of /vis/ commands
 in the macro vis.mac. This macro is automatically read from 
 the main in case of interactive running mode.
 	
 The detector has a default view which is a longitudinal view of the tank. 	
 The tracks are drawn at the end of event, and erased at the end of run.
 
 How to start
 ------------
 
 - compile and link to generate an executable
 	% cd N06
 	% gmake
 		
 - execute N06 in 'batch' mode from macro files
 	% exampleN06   exampleN06.in
 		
 - execute N06 in 'interactive mode' with visualization
 	% exampleN06
 	....
 	Idle> type your commands. For instance:
 	Idle> /control/execute optPhoton.mac
 	....
 	Idle> exit
 
