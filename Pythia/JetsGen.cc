// JetsGen.cc is a part of the PYTHIA event generator.
// Copyright (C) 2012 Mikhail Kirsanov, Torbjorn Sjostrand.
// PYTHIA is licenced under the GNU GPL version 2, see COPYING for details.
// Please respect the MCnet Guidelines, see GUIDELINES for details.

// This is a simple test program.
// It illustrates how a file with HepMC events can be generated by Pythia8.
// Input and output files are specified on the command line, e.g. like
// ./JetsGen.exe JetsGen.cmnd HepMCoutJets.dat > out
// The main program contains no analysis; this is intended to happen later.
// It therefore "never" has to be recompiled to handle different tasks.

// WARNING: typically one needs 25 MB/100 events at the LHC.
// Therefore large event samples may be impractical.

#include "Pythia8/Pythia.h"
//#include "HepMCInterface.h"
#include "Pythia8/Pythia8ToHepMC.h"

#include "HepMC/GenEvent.h"   
#include "HepMC/IO_GenEvent.h"

// Following line is a deprecated alternative, removed in recent versions.
//#include "HepMC/IO_Ascii.h"
//#include "HepMC/IO_AsciiParticles.h"

#include "TH1D.h"
#include "TH2D.h"
#include "TTree.h"
#include "TFile.h"


// Following line to be used with HepMC 2.04 onwards.
//---------------------------------------------------
#ifdef HEPMC_HAS_UNITS
#include "HepMC/Units.h"
#endif

using namespace Pythia8; 

//==========================================================================

// Simple method to do the filling of partons into the event record.
//-------------------------------------------------------------------
//void fillPartons(int type, double ee, Event& event, ParticleData& pdt, Rndm& rndm) {
void fillPartons(int type, double ee, double eta, double phi, Event& event, ParticleData& pdt) {

// Reset event record to allow for new event.
//-------------------------------------------
  event.reset();

// Information on a q qbar system, to be hadronized.
// Generate one jet along z+ axis and another jet
//--------------------------
  if (type == 1) {
    int    id = 1;
    double mm = pdt.m0(id);
    double pp = sqrtpos(ee*ee - mm*mm);
    event.append(  id, 23, 101,   0, 0., 0.,  pp, ee, mm); 
    event.append( -id, 23,   0, 101, 0., 0., -pp, ee, mm);
  }
  else if (type == 2) {
    int    id = 2;
    double mm = pdt.m0(id);
    double pp = sqrtpos(ee*ee - mm*mm);
    double pt = pp/cosh(eta);
    double px = pt*cos(phi);
    double py = pt*sin(phi);
    double pz = pp*tanh(eta);
    event.append(id,23,101,0,px,py,pz,ee,mm);
    event.append(-id,23,0,101,-px,-py,-pz,ee,mm);
//  eta=1.5; phi=20deg
//    event.append(  id, 23, 101,   0, 0., 0.	,  pp, ee, mm); 
//    event.append( -id, 23,   0, 101, 0., 0., -pp, ee, mm);
//  eta 3.5 and phi 25 deg
    /*event.append( id, 23, 101, 0, 0.05468637996390685112*pp, 0.02550067777394384022*pp, 0.99817789761119870928*pp, ee, mm);
    event.append( -id, 23, 0, 101, -0.05468637996390685112*pp, -0.02550067777394384022*pp, -0.99817789761119870928*pp, ee, mm);*/
//  eta 2.0  and phi 25 deg
    /*event.append( id, 23, 101, 0, 0.24089862980402399785*pp, 0.11233287591666237805*pp, 0.96402758007581688395*pp, ee,mm);
    event.append( -id, 23, 0, 101, -0.24089862980402399785*pp, -0.11233287591666237805*pp, -0.96402758007581688395*pp, ee,mm);*/
    // eta 1.5
    /*event.append(  id, 23, 101,   0, 0.39946*pp, 0.145391*pp, 0.905148*pp, ee, mm);
    event.append(  -id, 23, 0,   101, -0.39946*pp, -0.145391*pp, -0.905148*pp, ee, mm);*/
  }
  else if (type == 3) {
    int    id = 3;
    double mm = pdt.m0(id);
    double pp = sqrtpos(ee*ee - mm*mm);
    event.append(  id, 23, 101,   0, 0., 0.,  pp, ee, mm);
    event.append( -id, 23,   0, 101, 0., 0., -pp, ee, mm);
  }

// Information on a g g system, to be hadronized.
//------------------------------------------------
  else if (type == 21) {
    int    id = 21;  
    event.append( id, 23, 101, 102, 0., 0.,  ee, ee); 
    event.append( id, 23, 102, 101, 0., 0., -ee, ee); 
  } 
}

// Start main 
//-----------

int main(int argc, char* argv[]) {

// Check that correct number of command-line arguments
//-----------------------------------------------------
  if (argc != 3) {
    cerr << " Unexpected number of command-line arguments. \n You are"
         << " expected to provide one input and one output file name. \n"
         << " Program stopped! " << endl;
    return 1;
  }

// Check that the provided input name corresponds to an existing file.
//--------------------------------------------------------------------
  ifstream is(argv[1]);  
  if (!is) {
    cerr << " Command-line file " << argv[1] << " was not found. \n"
         << " Program stopped! " << endl;
    return 1;
  }

// Confirm that external files will be used for input and output.
//---------------------------------------------------------------
  cout << "\n >>> PYTHIA settings will be read from file " << argv[1] 
       << " <<< \n >>> HepMC events will be written to file " 
       << argv[2] << " <<< \n" << endl;

//
//---------------------------------------------------------------


  TFile tFile("jets.root","RECREATE");
  TH1D mult("mult","",10,0,100);
  TH1D energy("energy","",10,0,410);

  TTree tree("tree","tree");

  std::vector<int> * p_id=0;
  std::vector<double> * p_e=0;
  std::vector<double> * p_eta=0;
  std::vector<double> * p_phi=0;
  std::vector<double> * p_pt=0;

  tree.Branch("id",&p_id);
  tree.Branch("e",&p_e);
  tree.Branch("eta",&p_eta);
  tree.Branch("phi",&p_phi);
  tree.Branch("pt",&p_pt);
  

// Interface for conversion from Pythia8::Event to HepMC one. 
//------------------------------------------------------------
  HepMC::Pythia8ToHepMC ToHepMC;
//  ToHepMC.set_crash_on_problem();

// Specify file where HepMC events will be stored.
//-------------------------------------------------
  HepMC::IO_GenEvent ascii_io(argv[2], std::ios::out);

// Following line is a deprecated alternative, removed in recent versions
// HepMC::IO_Ascii ascii_io("hepmcout32.dat", std::ios::out);
// Line below is an eye-readable one-way output, uncomment the include above
// HepMC::IO_AsciiParticles ascii_io("hepmcout32.dat", std::ios::out);
 
// Generator. 
//-----------
  Pythia pythia;
  Event& event      = pythia.event;
  ParticleData& pdt = pythia.particleData;

// Read in commands from external file.
//-------------------------------------
  pythia.readFile(argv[1]);    

// Extract settings to be used in the main program.
//--------------------------------------------------

// Set number of events to generate and to list.
//----------------------------------------------
  int nEvent = pythia.mode("Main:numberOfEvents");
  int nList  = pythia.mode("Main:numberTolist");
  int nAbort = pythia.mode("Main:timesAllowErrors");

// Set parton type and energy.
//----------------------------
  int type =  pythia.mode("Main:spareMode1");
  double ee = pythia.parm("Main:spareParm1");
  double eta = pythia.parm("Main:spareParm2");
  double phi = pythia.parm("Main:spareParm3");

  std::cout << "ETA: " << eta << " PHI: " << phi << std::endl;

// Key requirement: switch off ProcessLevel, and thereby also PartonLevel.
//------------------------------------------------------------------------
  pythia.readString("ProcessLevel:all = off");

// Also allow resonance decays, with showers in them
//---------------------------------------------------
  pythia.readString("Standalone:allowResDec = on");

// Optionally switch off decays.
//pythia.readString("HadronLevel:Decay = off");

// Switch off automatic event listing in favour of manual.
//--------------------------------------------------------
  pythia.readString("Next:numberShowInfo = 0");
  pythia.readString("Next:numberShowProcess = 0");
  pythia.readString("Next:numberShowEvent = 0"); 

// Initialization.
//----------------
  pythia.init();

// Begin event loop.
//------------------
  int iAbort = 0; 
  for (int iEvent = 0; iEvent < nEvent; ++iEvent) {

// Set up parton-level configuration.
//-----------------------------------
//    fillPartons( type, ee, event, pdt, pythia.rndm); 
    fillPartons( type, ee, eta, phi, event, pdt); 

// Generate event. 
//----------------
    if (!pythia.next()) {

// If failure because reached end of file then exit event loop.
//-------------------------------------------------------------
      if (pythia.info.atEndOfFile()) {
        cout << " Aborted since reached end of Les Houches Event File\n"; 
        break; 
      }

// First few failures write off as "acceptable" errors, then quit.
//----------------------------------------------------------------
      if (++iAbort < nAbort) continue;
      cout << " Event generation aborted prematurely, owing to error!\n"; 
      break;
    }

// List first few events.
//-----------------------
    if (iEvent < nList) {
      event.list();
    }

// Construct new empty HepMC event. 
//---------------------------------
#ifdef HEPMC_HAS_UNITS

// This form with arguments is only meaningful for HepMC 2.04 onwards, 
// and even then unnecessary if HepMC was built with GeV and mm as units.
//-----------------------------------------------------------------------
    HepMC::GenEvent* hepmcevt = new HepMC::GenEvent(HepMC::Units::GEV, HepMC::Units::MM);
#else

// This form is needed for backwards compatibility. 
// In HepMCInterface.cc a conversion from GeV to MeV will be done.

   HepMC::GenEvent* hepmcevt = new HepMC::GenEvent();
#endif

// Fill HepMC event, including PDF info.
//--------------------------------------
    //ToHepMC.set_convert_to_mev( false );
    ToHepMC.fill_next_event( pythia, hepmcevt );

// This alternative older method fills event, without PDF info.
// ToHepMC.fill_next_event( pythia.event, hepmcevt );

// Write the HepMC event to file. Done with it.
//---------------------------------------------
    ascii_io << hepmcevt;

    HepMC::GenEvent::particle_iterator itr = hepmcevt->particles_begin();
    HepMC::GenEvent::particle_iterator itrEnd = hepmcevt->particles_end();
    double E = 0.;
    int count = 0;
    for ( ; itr != itrEnd; itr++ ) {
      const unsigned status = (*itr)->status();
      if ( status == 1U ) {
	p_id->push_back((*itr)->pdg_id());
  	const HepMC::FourVector & mom = (*itr)->momentum();
	p_e->push_back(mom.e());
  	p_eta->push_back(mom.eta());
 	p_phi->push_back(mom.phi());
	p_pt->push_back(mom.perp());
	E += mom.e();
	count++;
      }
    } 

    mult.Fill(count);
    energy.Fill(E);

    tree.Fill();

    p_id->clear();
    p_e->clear();
    p_eta->clear();
    p_phi->clear();
    p_pt->clear();

    delete hepmcevt;

// End of event loop. Statistics. 
//--------------------------------
  }
  pythia.stat();

  mult.Write();
  energy.Write();
  tree.Write();
  tFile.Close();



// Done.
//------
  return 0;
}
